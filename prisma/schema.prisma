// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CUSTOMER") // ADMIN, CUSTOMER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, OUT_OF_STOCK
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Order {
  id            String   @id @default(uuid())
  userId        String
  status        String   @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  total         Float
  paymentMethod String // CREDIT_CARD, PIX, BOLETO
  paymentStatus String   @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String
  amount        Float
  method        String // CREDIT_CARD, PIX, BOLETO
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}
